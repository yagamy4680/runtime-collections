#!/bin/bash

function DBG {
	[ "true" == "${SCRIPT_DEBUG}" ] && echo -e $1
}

function LIGHT_GREEN {
	COLOR='\033[1;32m'
	NC='\033[0m'
	echo "${COLOR}$1${NC}"
}

function GRAY {
	COLOR='\033[1;30m'
	NC='\033[0m'
	echo "${COLOR}$1${NC}"
}

function YELLOW {
	COLOR='\033[1;33m'
	NC='\033[0m'
	echo "${COLOR}$1${NC}"
}


function cleanup {
	rm -rf $RC_NODENV_ROOT
}

function initiateDirectories {
	mkdir -p $RC_NODE_RUNTIME_DIR

	DATE=$(date +%Y%m%d)
	for c in {a..z}
	do
		export RC_NODE_WORKDIR="${RC_NODE_RUNTIME_DIR}/${DATE}${c}"
		[ -d $RC_NODE_WORKDIR ] || break
	done

	DBG "RC_NODE_WORKDIR = $RC_NODE_WORKDIR"
}


function initiateOsVariables {
	export OS_KERNEL=$(uname -s | tr "[A-Z]" "[a-z]")
	export OS_DIST_NAME=$(lsb_release -a 2>/dev/null | grep "^Distributor" | awk '{print $3}' | tr "[A-Z]" "[a-z]")
	export OS_DIST_CODENAME=$(lsb_release -a 2>/dev/null | grep "^Codename" | awk '{print $2}' | tr "[A-Z]" "[a-z]")
	export OS_ARCH=$(uname -m | tr "[A-Z]" "[a-z]")
	export OS_NAME="${OS_KERNEL}-${OS_DIST_NAME}-${OS_DIST_CODENAME}"
	export OS_CPUS=$(lscpu | grep "^CPU(s)" | awk '{print $2}')
}


function initiateVariables {
	initiateOsVariables
	export RC_NODENV_ROOT="/root/.nodenv"
	export RC_NODENV_VERSION_FILE="/root/.node-version"
	export RC_NODENV_NPM_DIR="/root/.npm"
	export RC_PROFILE="/root/.yrc_profile"

	if [ "" == "${RC_ROOT}" ]; then	
		CURRENT=$(pwd)
		cd $(dirname $0)
		cd ..
		export RC_ROOT=$(pwd)
		cd $CURRENT
	fi

	export RC_NODE_ROOT="${RC_ROOT}/nodejs"
	export RC_NODE_RUNTIME_DIR="${RC_NODE_ROOT}/runtimes/${OS_NAME}/${OS_ARCH}"

	DBG "OS_KERNEL = $OS_KERNEL"
	DBG "OS_DIST_NAME = $OS_DIST_NAME"
	DBG "OS_DIST_CODENAME = $OS_DIST_CODENAME"
	DBG "OS_ARCH = $OS_ARCH"
	DBG "OS_CPUS = $OS_CPUS"

	DBG "RC_NODENV_ROOT = $RC_NODENV_ROOT"
	DBG "RC_ROOT = $RC_ROOT"
	DBG "RC_ROOT = $RC_ROOT"
	DBG "RC_ROOT = $RC_ROOT"
	DBG "RC_ROOT = $RC_ROOT"
	DBG "RC_ROOT = $RC_ROOT"

	export PATH="${RC_NODENV_ROOT}/bin:$PATH"

	export RC_NODE_CONFIG_FILE="configs"
	export RC_NODE_CONFIG_JSON="config.json"
	export RC_NODE_BUILD_LOG="build.log"
}

function checkBuildPrerequisites {
	[ "" == "$(which pkg-config)" ] && echo "please install pkg-config tool" && exit 1

	LIBRARIES=("zlib apt-get libz-dev")

	for x in "${lib[@]}"
	do
		LIB=$(echo $x | awk '{print $1}')
		INSTALLATION=$(echo $x | awk '{print $2}')
		PACKAGE=$(echo $x | awk '{print $3}')
		
		if [ "0" != "$(pkg-config --exists ${lib})" ]; then 
			[ "apt-get" == "${INSTALLATION}" ] && echo "missing ${LIB}, please install it: ${INSTALLATION} -y ${PACKAGE}" && exit 1
			echo "missing ${LIB}" && exit 1
		fi
	done
}

function storeSettings {
	CONFIG_FILE="${RC_NODE_WORKDIR}/${RC_NODE_CONFIG_FILE}"
	CONFIG_JSON_FILE="${RC_NODE_WORKDIR}/${RC_NODE_CONFIG_JSON}"
	BUILD_FILE="${RC_NODE_WORKDIR}/${RC_NODE_BUILD_LOG}"

	echo "generating ${CONFIG_FILE} ..."
	cat <<EOF > ${CONFIG_FILE}
# Generated by scripts at $(date '+%Y/%m/%d %H:%M:%S')
#

# OS Settings
#
OS_KERNEL	$OS_KERNEL
OS_DIST_NAME	$OS_DIST_NAME
OS_DIST_CODENAME	$OS_DIST_CODENAME
OS_ARCHITECTURE	$OS_ARCH

# Build Settings
#
$(cat ${BUILD_OPTS_FILE})

# NodeJS
# 
nodejs	version	$VERSION
npm	version $NPM_VERSION

# NodeJS built-in modules
# 
EOF

	MODULES=($(echo $MODULES | tr ',' '\n'))
	for m in "${MODULES[@]}"
	do
		M_NAME=$(echo $m | awk -F '@' '{print $1}')
		M_VERSION=$(echo $m | awk -F '@' '{print $2}')
		[ "" == "${M_VERSION}" ] && echo -e "module\t${M_NAME}" >> ${CONFIG_FILE} || echo -e "module\t${M_NAME}\t${M_VERSION}" >> ${CONFIG_FILE}
	done

	[ -f "${BUILD_LOGFILE}" ] && echo "generating ${BUILD_FILE}" && cp ${BUILD_LOGFILE} ${BUILD_FILE}

	echo "generating ${CONFIG_JSON_FILE}"
	node -p process.config > ${CONFIG_JSON_FILE}
}

